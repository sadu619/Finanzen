name: Deploy SAP Integration API to Azure Web App

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'
      - 'function-app/msp_sap_integration/**'
      - '.github/workflows/api-deploy.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: 'false'

env:
  AZURE_WEBAPP_NAME: app-sap-integration-api-h7hwc9fwaugghnce
  PYTHON_VERSION: '3.11'
  RESOURCE_GROUP: marketing_controlling

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üîç Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Prepare deployment package
      run: |
        echo "üèóÔ∏è  Creating deployment structure..."
        
        # Create clean deployment directory
        mkdir -p deploy-package
        
        # Copy API files
        echo "üìÅ Copying API files..."
        cp -r api/* deploy-package/
        
        # Copy processing logic from function-app
        echo "‚öôÔ∏è  Copying processing logic..."
        if [ -f "function-app/msp_sap_integration/msp_sap_integration_fixed.py" ]; then
          cp function-app/msp_sap_integration/msp_sap_integration_fixed.py deploy-package/
          echo "‚úÖ Processing logic copied successfully"
        else
          echo "‚ùå Processing logic not found!"
          exit 1
        fi
        
        # Make startup script executable
        chmod +x deploy-package/startup.sh
        
        # Display package contents
        echo "üìã Deployment package contents:"
        ls -la deploy-package/
        
    - name: üîß Install dependencies and test
      run: |
        cd deploy-package
        
        echo "üì¶ Installing Python dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        echo "üß™ Testing imports..."
        python -c "
        try:
            import app
            print('‚úÖ Flask app imports successfully')
            
            import flask
            print('‚úÖ Flask available')
            
            import pandas as pd
            print('‚úÖ Pandas available')
            
            import sqlalchemy
            print('‚úÖ SQLAlchemy available')
            
            # Test if processing logic is importable
            try:
                from msp_sap_integration_fixed import DatabaseManager
                print('‚úÖ Processing logic imports successfully')
            except ImportError as e:
                print(f'‚ö†Ô∏è  Processing logic import warning: {e}')
            
            print('‚úÖ All critical imports successful')
            
        except Exception as e:
            print(f'‚ùå Import test failed: {e}')
            exit(1)
        "
        
    - name: ‚òÅÔ∏è  Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: üöÄ Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./deploy-package
        
    - name: ‚öôÔ∏è  Configure Azure Web App settings
      run: |
        echo "üîß Configuring startup command..."
        az webapp config set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --startup-file "startup.sh"
          
        echo "üîç Verifying web app configuration..."
        az webapp config show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --query "{startupFile: linuxFxVersion, pythonVersion: pythonVersion}"
        
    - name: üè• Health check after deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30
        
        echo "üîç Testing API health check endpoint..."
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
        
        # Try health check with retries
        for i in {1..5}; do
          echo "ü©∫ Health check attempt $i/5..."
          
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "‚úÖ Health check passed!"
            curl -s "$HEALTH_URL" | jq '.status, .version, .azure_web_app.name'
            break
          else
            echo "‚ö†Ô∏è  Health check failed, retrying in 15 seconds..."
            sleep 15
          fi
          
          if [ $i -eq 5 ]; then
            echo "‚ùå Health check failed after 5 attempts"
            echo "üîç Checking Azure Web App logs..."
            az webapp log tail \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --provider application &
            sleep 10
            exit 1
          fi
        done
        
    - name: üìä Post-deployment summary
      run: |
        echo ""
        echo "üéâ ====================================="
        echo "üöÄ DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "====================================="
        echo ""
        echo "üåê API URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "üè• Health Check: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
        echo "üìä Dashboard Data: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/data"
        echo "üíº Transactions: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/transactions"
        echo ""
        echo "üìã Key Endpoints:"
        echo "   - GET  /api/health - System status"
        echo "   - POST /api/process - Trigger data processing"
        echo "   - GET  /api/transactions - View transactions"
        echo "   - GET  /api/departments - Department summary"
        echo "   - GET  /api/outliers - Outlier analysis"
        echo "   - GET  /api/azure-info - Azure deployment info"
        echo ""
        echo "‚öôÔ∏è  Next Steps:"
        echo "   1. Configure DB_PASSWORD in Azure Web App settings"
        echo "   2. Test API endpoints"
        echo "   3. Run /api/process to generate initial data"
        echo "   4. Integrate with your frontend application"
        echo ""
        echo "üîß Azure Configuration:"
        echo "   Resource Group: ${{ env.RESOURCE_GROUP }}"
        echo "   Subscription: Marketing-Kosten-Analytics"
        echo "   GitHub Repo: https://github.com/sadu619/Finanzen"
        echo "====================================="